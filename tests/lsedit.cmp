#### Compiling MUF Program Untitled.muf(#4) ###########
SETPROP "_author" on #4 = "Revar Desmera <revar@gmail.com>"
SETPROP "_note" on #4 = "An example replacement for the lsedit program, written in MUV."
SETPROP "_version" on #4 = "1.000"
SETPROP "_lib-version" on #4 = "1.000"
EXPOSED 'lsedit__init_help' AS PUBLIC
SETPROP "_defs/lsedit__init_help" on #4 = "#4 \"lsedit__init_help\" call"
EXPOSED 'lsedit__show_help' AS PUBLIC
SETPROP "_defs/lsedit__show_help" on #4 = "#4 \"lsedit__show_help\" call"
EXPOSED 'lsedit__add_helptext' AS PUBLIC
SETPROP "_defs/lsedit__add_helptext" on #4 = "#4 \"lsedit__add_helptext\" call"
EXPOSED 'lsedit__editor' AS PUBLIC
SETPROP "_defs/lsedit__editor" on #4 = "#4 \"lsedit__editor\" call"
EXPOSED 'lsedit__basic' AS PUBLIC
SETPROP "_defs/lsedit__basic" on #4 = "#4 \"lsedit__basic\" call"

#### Showing Tokens for Untitled.muf(#4) ##############
    0: Function: argparse__init (0 vars)
    1: ""
    2: LV4: argparse__current_mode
    3: !
    4: {
    5: }
    6: ARRAY_MAKE
    7: LV5: argparse__modes_list
    8: !
    9: {
   10: }
   11: 2
   12: /
   13: ARRAY_MAKE_DICT
   14: LV6: argparse__flags_map
   15: !
   16: {
   17: }
   18: 2
   19: /
   20: ARRAY_MAKE_DICT
   21: LV7: argparse__posargs_map
   22: !
   23: {
   24: ""
   25: "remainder"
   26: }
   27: 2
   28: /
   29: ARRAY_MAKE_DICT
   30: LV8: argparse__remainder_map
   31: !
   32: 0
   33: EXIT

   34: Function: argparse__parse_posargs (2 vars)
   35: {
   36: SV1: _posargs
   37: @
   38: "^([a-z0-9_]*)([^a-z0-9_])(.*)$"
   39: 1
   40: REGEXP
   41: }
   42: ARRAY_MAKE
   43: 0
   44: ARRAY_GETITEM
   45: SV2: _tok
   46: !
   47: SV2: _tok
   48: @
   49: JmpIfFalse: 100
   50: LV7: argparse__posargs_map
   51: @
   52: SV0: _mode
   53: @
   54: ARRAY_GETITEM
   55: NOT
   56: JmpIfFalse: 67
   57: {
   58: }
   59: ARRAY_MAKE
   60: LV7: argparse__posargs_map
   61: @
   62: SV0: _mode
   63: @
   64: ARRAY_SETITEM
   65: LV7: argparse__posargs_map
   66: !
   67: LV7: argparse__posargs_map
   68: @
   69: SV0: _mode
   70: @
   71: OVER
   72: OVER
   73: ARRAY_GETITEM
   74: {
   75: SV2: _tok
   76: @
   77: 1
   78: ARRAY_GETITEM
   79: TOLOWER
   80: SV2: _tok
   81: @
   82: 2
   83: ARRAY_GETITEM
   84: }
   85: ARRAY_MAKE
   86: SWAP
   87: ARRAY_APPENDITEM
   88: ROT
   89: ROT
   90: ARRAY_SETITEM
   91: LV7: argparse__posargs_map
   92: !
   93: SV2: _tok
   94: @
   95: 3
   96: ARRAY_GETITEM
   97: SV1: _posargs
   98: !
   99: JMP: 111
  100: SV1: _posargs
  101: @
  102: TOLOWER
  103: LV8: argparse__remainder_map
  104: @
  105: SV0: _mode
  106: @
  107: ARRAY_SETITEM
  108: LV8: argparse__remainder_map
  109: !
  110: JMP: 114
  111: 1
  112: NOT
  113: JmpIfFalse: 35
  114: 0
  115: EXIT

  116: Function: argparse__set_mode (1 vars)
  117: SV0: _name
  118: @
  119: TOLOWER
  120: SV0: _name
  121: !
  122: SV0: _name
  123: @
  124: LV4: argparse__current_mode
  125: !
  126: 0
  127: EXIT

  128: Function: argparse__add_mode (3 vars)
  129: SV0: _name
  130: @
  131: TOLOWER
  132: SV0: _name
  133: !
  134: LV5: argparse__modes_list
  135: @
  136: SV0: _name
  137: @
  138: SWAP
  139: ARRAY_APPENDITEM
  140: LV5: argparse__modes_list
  141: !
  142: {
  143: }
  144: ARRAY_MAKE
  145: LV6: argparse__flags_map
  146: @
  147: SV0: _name
  148: @
  149: ARRAY_SETITEM
  150: LV6: argparse__flags_map
  151: !
  152: {
  153: }
  154: ARRAY_MAKE
  155: LV7: argparse__posargs_map
  156: @
  157: SV0: _name
  158: @
  159: ARRAY_SETITEM
  160: LV7: argparse__posargs_map
  161: !
  162: SV1: _flags
  163: @
  164: FOREACH
  165: __FORITER__
  166: JmpIfFalse: 205
  167: SV3: _flag
  168: !
  169: POP
  170: LV6: argparse__flags_map
  171: @
  172: SV0: _name
  173: @
  174: ARRAY_GETITEM
  175: NOT
  176: JmpIfFalse: 187
  177: {
  178: }
  179: ARRAY_MAKE
  180: LV6: argparse__flags_map
  181: @
  182: SV0: _name
  183: @
  184: ARRAY_SETITEM
  185: LV6: argparse__flags_map
  186: !
  187: LV6: argparse__flags_map
  188: @
  189: SV0: _name
  190: @
  191: OVER
  192: OVER
  193: ARRAY_GETITEM
  194: SV3: _flag
  195: @
  196: TOLOWER
  197: SWAP
  198: ARRAY_APPENDITEM
  199: ROT
  200: ROT
  201: ARRAY_SETITEM
  202: LV6: argparse__flags_map
  203: !
  204: JMP: 165
  205: __FORPOP__
  206: SV0: _name
  207: @
  208: SV2: _posargs
  209: @
  210: Addr:'#4'34
  211: EXECUTE
  212: POP
  213: 0
  214: EXIT

  215: Function: argparse__add_flag (1 vars)
  216: SV0: _name
  217: @
  218: TOLOWER
  219: SV0: _name
  220: !
  221: LV5: argparse__modes_list
  222: @
  223: FOREACH
  224: __FORITER__
  225: JmpIfFalse: 284
  226: SV1: _mode
  227: !
  228: POP
  229: SV1: _mode
  230: @
  231: TOLOWER
  232: SV1: _mode
  233: !
  234: LV5: argparse__modes_list
  235: @
  236: SV1: _mode
  237: @
  238: ARRAY_FINDVAL
  239: NOT
  240: JmpIfFalse: 250
  241: SV1: _mode
  242: @
  243: SV0: _name
  244: @
  245: "ArgParse: Option '%s' declared as part of non-existent mode '%s'!"
  246: FMTSTRING
  247: ABORT
  248: 0
  249: POP
  250: LV6: argparse__flags_map
  251: @
  252: SV1: _mode
  253: @
  254: ARRAY_GETITEM
  255: NOT
  256: JmpIfFalse: 267
  257: {
  258: }
  259: ARRAY_MAKE
  260: LV6: argparse__flags_map
  261: @
  262: SV1: _mode
  263: @
  264: ARRAY_SETITEM
  265: LV6: argparse__flags_map
  266: !
  267: LV6: argparse__flags_map
  268: @
  269: SV1: _mode
  270: @
  271: OVER
  272: OVER
  273: ARRAY_GETITEM
  274: SV0: _name
  275: @
  276: SWAP
  277: ARRAY_APPENDITEM
  278: ROT
  279: ROT
  280: ARRAY_SETITEM
  281: LV6: argparse__flags_map
  282: !
  283: JMP: 224
  284: __FORPOP__
  285: 0
  286: EXIT

  287: Function: argparse__add_posargs (1 vars)
  288: LV5: argparse__modes_list
  289: @
  290: FOREACH
  291: __FORITER__
  292: JmpIfFalse: 325
  293: SV1: _mode
  294: !
  295: POP
  296: SV1: _mode
  297: @
  298: TOLOWER
  299: SV1: _mode
  300: !
  301: LV5: argparse__modes_list
  302: @
  303: SV1: _mode
  304: @
  305: ARRAY_FINDVAL
  306: NOT
  307: JmpIfFalse: 317
  308: SV1: _mode
  309: @
  310: SV1: _mode
  311: @
  312: "ArgParse: Option '%s' declared as part of non-existent mode '%s'!"
  313: FMTSTRING
  314: ABORT
  315: 0
  316: POP
  317: SV1: _mode
  318: @
  319: SV0: _posargs
  320: @
  321: Addr:'#4'34
  322: EXECUTE
  323: POP
  324: JMP: 291
  325: __FORPOP__
  326: 0
  327: EXIT

  328: Function: argparse__show_usage (0 vars)
  329: TRIG
  330: NAME
  331: ";"
  332: SPLIT
  333: POP
  334: STRIPLEAD
  335: STRIPTAIL
  336: SV0: _cmd
  337: !
  338: "Usage:"
  339: LV0: me
  340: @
  341: SWAP
  342: NOTIFY
  343: 0
  344: POP
  345: LV5: argparse__modes_list
  346: @
  347: FOREACH
  348: __FORITER__
  349: JmpIfFalse: 459
  350: SV1: _mode
  351: !
  352: POP
  353: {
  354: }
  355: ARRAY_MAKE
  356: LV6: argparse__flags_map
  357: @
  358: SV1: _mode
  359: @
  360: ARRAY_GETITEM
  361: FOREACH
  362: __FORITER__
  363: JmpIfFalse: 379
  364: SV2: _flag
  365: !
  366: POP
  367: {
  368: "[#"
  369: SV2: _flag
  370: @
  371: "]"
  372: }
  373: ARRAY_MAKE
  374: ""
  375: ARRAY_JOIN
  376: SWAP
  377: ARRAY_APPENDITEM
  378: JMP: 362
  379: __FORPOP__
  380: SV3: _flags
  381: !
  382: {
  383: }
  384: ARRAY_MAKE
  385: LV7: argparse__posargs_map
  386: @
  387: SV1: _mode
  388: @
  389: ARRAY_GETITEM
  390: FOREACH
  391: __FORITER__
  392: JmpIfFalse: 413
  393: SV4: _posarg
  394: !
  395: POP
  396: {
  397: SV4: _posarg
  398: @
  399: 0
  400: ARRAY_GETITEM
  401: TOUPPER
  402: SV4: _posarg
  403: @
  404: 1
  405: ARRAY_GETITEM
  406: }
  407: ARRAY_MAKE
  408: ""
  409: ARRAY_JOIN
  410: SWAP
  411: ARRAY_APPENDITEM
  412: JMP: 391
  413: __FORPOP__
  414: SV5: _posargs
  415: !
  416: LV8: argparse__remainder_map
  417: @
  418: SV1: _mode
  419: @
  420: ARRAY_GETITEM
  421: TOUPPER
  422: SV5: _posargs
  423: @
  424: ""
  425: ARRAY_JOIN
  426: SV3: _flags
  427: @
  428: JmpIfFalse: 431
  429: " "
  430: JMP: 432
  431: ""
  432: SV3: _flags
  433: @
  434: " "
  435: ARRAY_JOIN
  436: SV1: _mode
  437: @
  438: SV1: _mode
  439: @
  440: JmpIfFalse: 443
  441: "#"
  442: JMP: 444
  443: ""
  444: SV0: _cmd
  445: @
  446: "%s %s%s %s%s%s%s"
  447: FMTSTRING
  448: SV6: _line
  449: !
  450: SV6: _line
  451: @
  452: LV0: me
  453: @
  454: SWAP
  455: NOTIFY
  456: 0
  457: POP
  458: JMP: 348
  459: __FORPOP__
  460: 0
  461: EXIT

  462: Function: argparse__parse (1 vars)
  463: {
  464: }
  465: 2
  466: /
  467: ARRAY_MAKE_DICT
  468: SV4: _opts
  469: !
  470: 0
  471: SV5: _mode_given
  472: !
  473: SV0: _line
  474: @
  475: "#"
  476: STRINGPFX
  477: JmpIfFalse: 700
  478: {
  479: {
  480: SV0: _line
  481: @
  482: 1
  483: STRCUT
  484: }
  485: ARRAY_MAKE
  486: 1
  487: ARRAY_GETITEM
  488: " "
  489: SPLIT
  490: }
  491: ARRAY_MAKE
  492: SV1: _parts
  493: !
  494: SV1: _parts
  495: @
  496: 0
  497: ARRAY_GETITEM
  498: SV6: _opt
  499: !
  500: SV6: _opt
  501: @
  502: TOLOWER
  503: SV7: _lc_opt
  504: !
  505: 0
  506: SV8: _found
  507: !
  508: LV5: argparse__modes_list
  509: @
  510: FOREACH
  511: __FORITER__
  512: JmpIfFalse: 534
  513: SV2: _mode
  514: !
  515: POP
  516: SV2: _mode
  517: @
  518: SV7: _lc_opt
  519: @
  520: STRINGCMP
  521: NOT
  522: JmpIfFalse: 533
  523: SV2: _mode
  524: @
  525: LV4: argparse__current_mode
  526: !
  527: SV8: _found
  528: @
  529: SV8: _found
  530: ++
  531: POP
  532: JMP: 534
  533: JMP: 511
  534: __FORPOP__
  535: SV8: _found
  536: @
  537: JmpIfFalse: 550
  538: SV5: _mode_given
  539: @
  540: SV5: _mode_given
  541: ++
  542: POP
  543: SV1: _parts
  544: @
  545: 1
  546: ARRAY_GETITEM
  547: SV0: _line
  548: !
  549: JMP: 473
  550: LV6: argparse__flags_map
  551: @
  552: LV4: argparse__current_mode
  553: @
  554: ARRAY_GETITEM
  555: FOREACH
  556: __FORITER__
  557: JmpIfFalse: 584
  558: SV3: _flag
  559: !
  560: POP
  561: SV3: _flag
  562: @
  563: SV7: _lc_opt
  564: @
  565: STRINGCMP
  566: NOT
  567: JmpIfFalse: 583
  568: SV6: _opt
  569: @
  570: SV4: _opts
  571: @
  572: SV3: _flag
  573: @
  574: ARRAY_SETITEM
  575: SV4: _opts
  576: !
  577: SV8: _found
  578: @
  579: SV8: _found
  580: ++
  581: POP
  582: JMP: 584
  583: JMP: 556
  584: __FORPOP__
  585: SV8: _found
  586: @
  587: JmpIfFalse: 595
  588: SV1: _parts
  589: @
  590: 1
  591: ARRAY_GETITEM
  592: SV0: _line
  593: !
  594: JMP: 473
  595: LV5: argparse__modes_list
  596: @
  597: FOREACH
  598: __FORITER__
  599: JmpIfFalse: 619
  600: SV2: _mode
  601: !
  602: POP
  603: SV2: _mode
  604: @
  605: SV7: _lc_opt
  606: @
  607: STRINGPFX
  608: JmpIfFalse: 618
  609: SV2: _mode
  610: @
  611: LV4: argparse__current_mode
  612: !
  613: SV8: _found
  614: @
  615: SV8: _found
  616: ++
  617: POP
  618: JMP: 598
  619: __FORPOP__
  620: LV6: argparse__flags_map
  621: @
  622: LV4: argparse__current_mode
  623: @
  624: ARRAY_GETITEM
  625: FOREACH
  626: __FORITER__
  627: JmpIfFalse: 652
  628: SV3: _flag
  629: !
  630: POP
  631: SV3: _flag
  632: @
  633: SV7: _lc_opt
  634: @
  635: STRINGPFX
  636: JmpIfFalse: 651
  637: SV6: _opt
  638: @
  639: SV4: _opts
  640: @
  641: SV3: _flag
  642: @
  643: ARRAY_SETITEM
  644: SV4: _opts
  645: !
  646: SV8: _found
  647: @
  648: SV8: _found
  649: ++
  650: POP
  651: JMP: 626
  652: __FORPOP__
  653: SV8: _found
  654: @
  655: 1
  656: =
  657: JmpIfFalse: 666
  658: SV1: _parts
  659: @
  660: 1
  661: ARRAY_GETITEM
  662: SV0: _line
  663: !
  664: JMP: 473
  665: JMP: 692
  666: SV8: _found
  667: @
  668: 1
  669: >
  670: JmpIfFalse: 682
  671: SV6: _opt
  672: @
  673: "Option #%s is ambiguous."
  674: FMTSTRING
  675: LV0: me
  676: @
  677: SWAP
  678: NOTIFY
  679: 0
  680: POP
  681: JMP: 692
  682: SV6: _opt
  683: @
  684: "Option #%s not recognized."
  685: FMTSTRING
  686: LV0: me
  687: @
  688: SWAP
  689: NOTIFY
  690: 0
  691: POP
  692: Addr:'#4'328
  693: EXECUTE
  694: POP
  695: {
  696: }
  697: ARRAY_MAKE
  698: EXIT
  699: JMP: 473
  700: SV5: _mode_given
  701: @
  702: 1
  703: >
  704: JmpIfFalse: 719
  705: "Cannot mix modes."
  706: LV0: me
  707: @
  708: SWAP
  709: NOTIFY
  710: 0
  711: POP
  712: Addr:'#4'328
  713: EXECUTE
  714: POP
  715: {
  716: }
  717: ARRAY_MAKE
  718: EXIT
  719: LV7: argparse__posargs_map
  720: @
  721: LV4: argparse__current_mode
  722: @
  723: ARRAY_GETITEM
  724: FOREACH
  725: __FORITER__
  726: JmpIfFalse: 762
  727: SV9: _posarg
  728: !
  729: POP
  730: {
  731: SV0: _line
  732: @
  733: SV9: _posarg
  734: @
  735: 1
  736: ARRAY_GETITEM
  737: SPLIT
  738: }
  739: ARRAY_MAKE
  740: SV1: _parts
  741: !
  742: SV1: _parts
  743: @
  744: 0
  745: ARRAY_GETITEM
  746: SV4: _opts
  747: @
  748: SV9: _posarg
  749: @
  750: 0
  751: ARRAY_GETITEM
  752: ARRAY_SETITEM
  753: SV4: _opts
  754: !
  755: SV1: _parts
  756: @
  757: 1
  758: ARRAY_GETITEM
  759: SV0: _line
  760: !
  761: JMP: 725
  762: __FORPOP__
  763: SV0: _line
  764: @
  765: SV4: _opts
  766: @
  767: LV8: argparse__remainder_map
  768: @
  769: LV4: argparse__current_mode
  770: @
  771: ARRAY_GETITEM
  772: ARRAY_SETITEM
  773: SV4: _opts
  774: !
  775: LV4: argparse__current_mode
  776: @
  777: SV4: _opts
  778: @
  779: "mode"
  780: ARRAY_SETITEM
  781: SV4: _opts
  782: !
  783: SV4: _opts
  784: @
  785: EXIT

  786: Function: lsedit__init_help (0 vars)
  787: {
  788: }
  789: ARRAY_MAKE
  790: LV9: lsedit__help_lines
  791: !
  792: 0
  793: EXIT

  794: Function: lsedit__show_help (0 vars)
  795: {
  796: {
  797: "-- Commands: -----------------------------------------------------"
  798: "..LINE              Insert .LINE at current insertion position."
  799: ".h                  Show this help message."
  800: ".q                  Quit editor, saving changes."
  801: ".x                  Quit editor, aborting changes."
  802: ".l                  List all lines."
  803: ".l LINE             List given LINE."
  804: ".l LINE,LINE        List given LINE range, inclusive."
  805: ".i LINE             Move insertion to before LINE."
  806: ".d LINE             Delete LINE."
  807: ".d LINE,LINE        Delete given LINE range, inclusive."
  808: ".f                  Format all lines to 75 columns."
  809: ".f LINE,LINE        Format given line range to 75 columns."
  810: ".f LINE,LINE=COLS   Format given line range to COLS columns."
  811: ".s /FIND/REPL       Substitute regexp FIND with REPL in all lines."
  812: ".s LINE/FIND/REPL   Substitute regexp FIND with REPL in LINE."
  813: ".s L1,L2/FIND/REPL  Substitute FIND with REPL between L1 and L2."
  814: ".w                  Write/Save changes without exiting editor."
  815: ".w OBJ=PROP         Write/Save list to OBJ in proplist PROP."
  816: }
  817: ARRAY_MAKE
  818: LV9: lsedit__help_lines
  819: @
  820: {
  821: "------------------------------------------------------------------"
  822: }
  823: ARRAY_MAKE
  824: }
  825: ARRAY_MAKE
  826: {
  827: }
  828: ARRAY_MAKE
  829: SWAP
  830: ARRAY_REVERSE
  831: FOREACH
  832: __FORITER__
  833: JmpIfFalse: 840
  834: SWAP
  835: POP
  836: 0
  837: SWAP
  838: ARRAY_INSERTRANGE
  839: JMP: 832
  840: __FORPOP__
  841: FOREACH
  842: __FORITER__
  843: JmpIfFalse: 856
  844: SV0: _line
  845: !
  846: POP
  847: SV0: _line
  848: @
  849: LV0: me
  850: @
  851: SWAP
  852: NOTIFY
  853: 0
  854: POP
  855: JMP: 842
  856: __FORPOP__
  857: 0
  858: EXIT

  859: Function: lsedit__add_helptext (1 vars)
  860: LV9: lsedit__help_lines
  861: @
  862: SV0: _line
  863: @
  864: SWAP
  865: ARRAY_APPENDITEM
  866: LV9: lsedit__help_lines
  867: !
  868: 0
  869: EXIT

  870: Function: lsedit__show_list (4 vars)
  871: SV0: _lines
  872: @
  873: FOREACH
  874: __FORITER__
  875: JmpIfFalse: 921
  876: SV4: _line
  877: !
  878: SV5: _lnum
  879: !
  880: SV5: _lnum
  881: @
  882: SV5: _lnum
  883: ++
  884: POP
  885: SV5: _lnum
  886: @
  887: SV1: _start
  888: @
  889: >=
  890: DUP
  891: JmpIfFalse: 898
  892: POP
  893: SV5: _lnum
  894: @
  895: SV2: _end
  896: @
  897: <=
  898: JmpIfFalse: 920
  899: SV4: _line
  900: @
  901: SV5: _lnum
  902: @
  903: SV5: _lnum
  904: @
  905: SV3: _pos
  906: @
  907: =
  908: JmpIfFalse: 911
  909: ">"
  910: JMP: 912
  911: " "
  912: "%s%3i: %s"
  913: FMTSTRING
  914: LV0: me
  915: @
  916: SWAP
  917: NOTIFY
  918: 0
  919: POP
  920: JMP: 874
  921: __FORPOP__
  922: SV3: _pos
  923: @
  924: SV0: _lines
  925: @
  926: ARRAY_COUNT
  927: >
  928: JmpIfFalse: 936
  929: ">"
  930: LV0: me
  931: @
  932: SWAP
  933: NOTIFY
  934: 0
  935: POP
  936: "Done."
  937: LV0: me
  938: @
  939: SWAP
  940: NOTIFY
  941: 0
  942: POP
  943: 0
  944: EXIT

  945: Function: lsedit__list_split_range (3 vars)
  946: {
  947: }
  948: ARRAY_MAKE
  949: SV3: _pfx
  950: !
  951: {
  952: }
  953: ARRAY_MAKE
  954: SV4: _mid
  955: !
  956: {
  957: }
  958: ARRAY_MAKE
  959: SV5: _sfx
  960: !
  961: SV0: _lines
  962: @
  963: FOREACH
  964: __FORITER__
  965: JmpIfFalse: 1026
  966: SV6: _line
  967: !
  968: SV7: _idx
  969: !
  970: SV7: _idx
  971: @
  972: SV7: _idx
  973: ++
  974: POP
  975: SV7: _idx
  976: @
  977: SV1: _start
  978: @
  979: <
  980: JmpIfFalse: 989
  981: SV3: _pfx
  982: @
  983: SV6: _line
  984: @
  985: SWAP
  986: ARRAY_APPENDITEM
  987: SV3: _pfx
  988: !
  989: SV7: _idx
  990: @
  991: SV1: _start
  992: @
  993: >=
  994: DUP
  995: JmpIfFalse: 1002
  996: POP
  997: SV7: _idx
  998: @
  999: SV2: _end
 1000: @
 1001: <=
 1002: JmpIfFalse: 1011
 1003: SV4: _mid
 1004: @
 1005: SV6: _line
 1006: @
 1007: SWAP
 1008: ARRAY_APPENDITEM
 1009: SV4: _mid
 1010: !
 1011: SV7: _idx
 1012: @
 1013: SV2: _end
 1014: @
 1015: >
 1016: JmpIfFalse: 1025
 1017: SV5: _sfx
 1018: @
 1019: SV6: _line
 1020: @
 1021: SWAP
 1022: ARRAY_APPENDITEM
 1023: SV5: _sfx
 1024: !
 1025: JMP: 964
 1026: __FORPOP__
 1027: {
 1028: SV3: _pfx
 1029: @
 1030: SV4: _mid
 1031: @
 1032: SV5: _sfx
 1033: @
 1034: }
 1035: ARRAY_MAKE
 1036: EXIT

 1037: Function: lsedit__regexp_list_sub (3 vars)
 1038: 0
 1039: SV3: _changed
 1040: !
 1041: SV0: _lines
 1042: @
 1043: FOREACH
 1044: __FORITER__
 1045: JmpIfFalse: 1083
 1046: SV4: _line
 1047: !
 1048: SV5: _idx
 1049: !
 1050: SV4: _line
 1051: @
 1052: SV1: _fnd
 1053: @
 1054: SV2: _repl
 1055: @
 1056: 2
 1057: 1
 1058: BITOR
 1059: REGSUB
 1060: SV6: _newln
 1061: !
 1062: SV6: _newln
 1063: @
 1064: SV4: _line
 1065: @
 1066: STRCMP
 1067: JmpIfFalse: 1082
 1068: SV6: _newln
 1069: @
 1070: SV0: _lines
 1071: @
 1072: SV5: _idx
 1073: @
 1074: ARRAY_SETITEM
 1075: SV0: _lines
 1076: !
 1077: SV3: _changed
 1078: @
 1079: SV3: _changed
 1080: ++
 1081: POP
 1082: JMP: 1044
 1083: __FORPOP__
 1084: {
 1085: SV3: _changed
 1086: @
 1087: SV0: _lines
 1088: @
 1089: }
 1090: ARRAY_MAKE
 1091: EXIT

 1092: Function: lsedit__format_list (2 vars)
 1093: SV0: _lines
 1094: @
 1095: " "
 1096: ARRAY_JOIN
 1097: SV2: _txt
 1098: !
 1099: SV2: _txt
 1100: @
 1101: "  *"
 1102: " "
 1103: 2
 1104: REGSUB
 1105: SV2: _txt
 1106: !
 1107: {
 1108: }
 1109: ARRAY_MAKE
 1110: SV3: _out
 1111: !
 1112: SV2: _txt
 1113: @
 1114: STRLEN
 1115: SV1: _cols
 1116: @
 1117: >
 1118: JmpIfFalse: 1204
 1119: {
 1120: SV2: _txt
 1121: @
 1122: SV1: _cols
 1123: @
 1124: STRCUT
 1125: }
 1126: ARRAY_MAKE
 1127: 0
 1128: 1
 1129: ARRAY_GETRANGE
 1130: ARRAY_VALS
 1131: POP
 1132: SV2: _txt
 1133: !
 1134: SV4: _pre
 1135: !
 1136: {
 1137: SV4: _pre
 1138: @
 1139: " "
 1140: RSPLIT
 1141: }
 1142: ARRAY_MAKE
 1143: 0
 1144: 1
 1145: ARRAY_GETRANGE
 1146: ARRAY_VALS
 1147: POP
 1148: SV5: _rem
 1149: !
 1150: SV4: _pre
 1151: !
 1152: SV4: _pre
 1153: @
 1154: NOT
 1155: JmpIfFalse: 1164
 1156: SV5: _rem
 1157: @
 1158: SV4: _pre
 1159: !
 1160: ""
 1161: SV5: _rem
 1162: !
 1163: JMP: 1188
 1164: SV5: _rem
 1165: @
 1166: STRLEN
 1167: SV1: _cols
 1168: @
 1169: 2
 1170: /
 1171: >
 1172: JmpIfFalse: 1188
 1173: {
 1174: SV4: _pre
 1175: @
 1176: " "
 1177: SV5: _rem
 1178: @
 1179: }
 1180: ARRAY_MAKE
 1181: ""
 1182: ARRAY_JOIN
 1183: SV4: _pre
 1184: !
 1185: ""
 1186: SV5: _rem
 1187: !
 1188: SV3: _out
 1189: @
 1190: SV4: _pre
 1191: @
 1192: SWAP
 1193: ARRAY_APPENDITEM
 1194: SV3: _out
 1195: !
 1196: SV5: _rem
 1197: @
 1198: SV2: _txt
 1199: @
 1200: STRCAT
 1201: SV2: _txt
 1202: !
 1203: JMP: 1112
 1204: SV2: _txt
 1205: @
 1206: STRIPLEAD
 1207: STRIPTAIL
 1208: JmpIfFalse: 1217
 1209: SV3: _out
 1210: @
 1211: SV2: _txt
 1212: @
 1213: SWAP
 1214: ARRAY_APPENDITEM
 1215: SV3: _out
 1216: !
 1217: SV3: _out
 1218: @
 1219: EXIT

 1220: Function: lsedit__parse_lines (3 vars)
 1221: SV0: _str
 1222: @
 1223: ","
 1224: INSTR
 1225: JmpIfFalse: 1250
 1226: {
 1227: SV0: _str
 1228: @
 1229: ","
 1230: SPLIT
 1231: }
 1232: ARRAY_MAKE
 1233: SV0: _str
 1234: !
 1235: SV0: _str
 1236: @
 1237: 0
 1238: ARRAY_GETITEM
 1239: ATOI
 1240: SV1: _line1
 1241: !
 1242: SV0: _str
 1243: @
 1244: 1
 1245: ARRAY_GETITEM
 1246: ATOI
 1247: SV2: _line2
 1248: !
 1249: JMP: 1292
 1250: SV0: _str
 1251: @
 1252: " "
 1253: INSTR
 1254: JmpIfFalse: 1279
 1255: {
 1256: SV0: _str
 1257: @
 1258: " "
 1259: SPLIT
 1260: }
 1261: ARRAY_MAKE
 1262: SV0: _str
 1263: !
 1264: SV0: _str
 1265: @
 1266: 0
 1267: ARRAY_GETITEM
 1268: ATOI
 1269: SV1: _line1
 1270: !
 1271: SV0: _str
 1272: @
 1273: 1
 1274: ARRAY_GETITEM
 1275: ATOI
 1276: SV2: _line2
 1277: !
 1278: JMP: 1292
 1279: SV0: _str
 1280: @
 1281: STRIPLEAD
 1282: STRIPTAIL
 1283: JmpIfFalse: 1292
 1284: SV0: _str
 1285: @
 1286: ATOI
 1287: DUP
 1288: SV2: _line2
 1289: !
 1290: SV1: _line1
 1291: !
 1292: {
 1293: SV1: _line1
 1294: @
 1295: SV2: _line2
 1296: @
 1297: }
 1298: ARRAY_MAKE
 1299: EXIT

 1300: Function: lsedit__editor (3 vars)
 1301: 0
 1302: SV3: _line1
 1303: !
 1304: 0
 1305: SV4: _line2
 1306: !
 1307: 1
 1308: JmpIfFalse: 2177
 1309: LV10: lsedit__insert_pos
 1310: @
 1311: SV0: _lines
 1312: @
 1313: ARRAY_COUNT
 1314: 1
 1315: +
 1316: >
 1317: JmpIfFalse: 1335
 1318: SV0: _lines
 1319: @
 1320: ARRAY_COUNT
 1321: 1
 1322: +
 1323: LV10: lsedit__insert_pos
 1324: !
 1325: LV10: lsedit__insert_pos
 1326: @
 1327: "Inserting at line %i"
 1328: FMTSTRING
 1329: LV0: me
 1330: @
 1331: SWAP
 1332: NOTIFY
 1333: 0
 1334: POP
 1335: READ
 1336: SV5: _inln
 1337: !
 1338: SV5: _inln
 1339: @
 1340: "."
 1341: 1
 1342: STRNCMP
 1343: JmpIfFalse: 1361
 1344: SV5: _inln
 1345: @
 1346: SV0: _lines
 1347: @
 1348: LV10: lsedit__insert_pos
 1349: @
 1350: 1
 1351: -
 1352: ARRAY_INSERTITEM
 1353: SV0: _lines
 1354: !
 1355: LV10: lsedit__insert_pos
 1356: @
 1357: LV10: lsedit__insert_pos
 1358: ++
 1359: POP
 1360: JMP: 1307
 1361: SV5: _inln
 1362: @
 1363: ".."
 1364: 2
 1365: STRNCMP
 1366: NOT
 1367: JmpIfFalse: 1396
 1368: {
 1369: SV5: _inln
 1370: @
 1371: 1
 1372: STRCUT
 1373: }
 1374: ARRAY_MAKE
 1375: 1
 1376: ARRAY_GETITEM
 1377: SV5: _inln
 1378: !
 1379: SV5: _inln
 1380: @
 1381: SV0: _lines
 1382: @
 1383: LV10: lsedit__insert_pos
 1384: @
 1385: 1
 1386: -
 1387: ARRAY_INSERTITEM
 1388: SV0: _lines
 1389: !
 1390: LV10: lsedit__insert_pos
 1391: @
 1392: LV10: lsedit__insert_pos
 1393: ++
 1394: POP
 1395: JMP: 1307
 1396: {
 1397: SV5: _inln
 1398: @
 1399: " "
 1400: SPLIT
 1401: }
 1402: ARRAY_MAKE
 1403: 0
 1404: 1
 1405: ARRAY_GETRANGE
 1406: ARRAY_VALS
 1407: POP
 1408: SV6: _cmdargs
 1409: !
 1410: SV7: _cmd
 1411: !
 1412: SV7: _cmd
 1413: @
 1414: SV8: _swvar
 1415: !
 1416: SV8: _swvar
 1417: @
 1418: ".h"
 1419: STRCMP
 1420: NOT
 1421: JmpIfFalse: 1426
 1422: Addr:'#4'794
 1423: EXECUTE
 1424: POP
 1425: JMP: 2176
 1426: SV8: _swvar
 1427: @
 1428: ".q"
 1429: STRCMP
 1430: NOT
 1431: JmpIfFalse: 1459
 1432: SV1: _obj
 1433: @
 1434: SV2: _prop
 1435: @
 1436: SV0: _lines
 1437: @
 1438: ARRAY_PUT_PROPLIST
 1439: 0
 1440: POP
 1441: "Saved."
 1442: LV0: me
 1443: @
 1444: SWAP
 1445: NOTIFY
 1446: 0
 1447: POP
 1448: {
 1449: SV7: _cmd
 1450: @
 1451: SV6: _cmdargs
 1452: @
 1453: SV0: _lines
 1454: @
 1455: }
 1456: ARRAY_MAKE
 1457: EXIT
 1458: JMP: 2176
 1459: SV8: _swvar
 1460: @
 1461: ".x"
 1462: STRCMP
 1463: NOT
 1464: JmpIfFalse: 1483
 1465: "Aborting."
 1466: LV0: me
 1467: @
 1468: SWAP
 1469: NOTIFY
 1470: 0
 1471: POP
 1472: {
 1473: SV7: _cmd
 1474: @
 1475: SV6: _cmdargs
 1476: @
 1477: SV0: _lines
 1478: @
 1479: }
 1480: ARRAY_MAKE
 1481: EXIT
 1482: JMP: 2176
 1483: SV8: _swvar
 1484: @
 1485: ".l"
 1486: STRCMP
 1487: NOT
 1488: JmpIfFalse: 1516
 1489: SV6: _cmdargs
 1490: @
 1491: 1
 1492: 999999
 1493: Addr:'#4'1220
 1494: EXECUTE
 1495: 0
 1496: 1
 1497: ARRAY_GETRANGE
 1498: ARRAY_VALS
 1499: POP
 1500: SV4: _line2
 1501: !
 1502: SV3: _line1
 1503: !
 1504: SV0: _lines
 1505: @
 1506: SV3: _line1
 1507: @
 1508: SV4: _line2
 1509: @
 1510: LV10: lsedit__insert_pos
 1511: @
 1512: Addr:'#4'870
 1513: EXECUTE
 1514: POP
 1515: JMP: 2176
 1516: SV8: _swvar
 1517: @
 1518: ".i"
 1519: STRCMP
 1520: NOT
 1521: JmpIfFalse: 1583
 1522: SV6: _cmdargs
 1523: @
 1524: 1
 1525: 1
 1526: Addr:'#4'1220
 1527: EXECUTE
 1528: 0
 1529: 1
 1530: ARRAY_GETRANGE
 1531: ARRAY_VALS
 1532: POP
 1533: SV4: _line2
 1534: !
 1535: SV3: _line1
 1536: !
 1537: SV3: _line1
 1538: @
 1539: SV4: _line2
 1540: @
 1541: =
 1542: NOT
 1543: JmpIfFalse: 1552
 1544: "Usage: .i LINENUM"
 1545: LV0: me
 1546: @
 1547: SWAP
 1548: NOTIFY
 1549: 0
 1550: POP
 1551: JMP: 2176
 1552: SV3: _line1
 1553: @
 1554: LV10: lsedit__insert_pos
 1555: !
 1556: LV10: lsedit__insert_pos
 1557: @
 1558: SV0: _lines
 1559: @
 1560: ARRAY_COUNT
 1561: 1
 1562: +
 1563: >
 1564: JmpIfFalse: 1572
 1565: SV0: _lines
 1566: @
 1567: ARRAY_COUNT
 1568: 1
 1569: +
 1570: LV10: lsedit__insert_pos
 1571: !
 1572: LV10: lsedit__insert_pos
 1573: @
 1574: "Inserting at line %i"
 1575: FMTSTRING
 1576: LV0: me
 1577: @
 1578: SWAP
 1579: NOTIFY
 1580: 0
 1581: POP
 1582: JMP: 2176
 1583: SV8: _swvar
 1584: @
 1585: ".s"
 1586: STRCMP
 1587: NOT
 1588: JmpIfFalse: 1747
 1589: SV6: _cmdargs
 1590: @
 1591: "/"
 1592: EXPLODE_ARRAY
 1593: SV6: _cmdargs
 1594: !
 1595: SV6: _cmdargs
 1596: @
 1597: ARRAY_COUNT
 1598: 3
 1599: =
 1600: JmpIfFalse: 1739
 1601: SV6: _cmdargs
 1602: @
 1603: 0
 1604: 2
 1605: ARRAY_GETRANGE
 1606: ARRAY_VALS
 1607: POP
 1608: SV9: _repl
 1609: !
 1610: SV10: _fnd
 1611: !
 1612: SV3: _line1
 1613: !
 1614: SV3: _line1
 1615: @
 1616: 1
 1617: 999999
 1618: Addr:'#4'1220
 1619: EXECUTE
 1620: 0
 1621: 1
 1622: ARRAY_GETRANGE
 1623: ARRAY_VALS
 1624: POP
 1625: SV4: _line2
 1626: !
 1627: SV3: _line1
 1628: !
 1629: SV3: _line1
 1630: @
 1631: NOT
 1632: DUP
 1633: NOT
 1634: JmpIfFalse: 1646
 1635: POP
 1636: SV4: _line2
 1637: @
 1638: NOT
 1639: DUP
 1640: NOT
 1641: JmpIfFalse: 1646
 1642: POP
 1643: SV10: _fnd
 1644: @
 1645: NOT
 1646: JmpIfFalse: 1655
 1647: "Usage: .s [LINE[,LINE]]/FIND/REPLACE"
 1648: LV0: me
 1649: @
 1650: SWAP
 1651: NOTIFY
 1652: 0
 1653: POP
 1654: JMP: 2176
 1655: SV0: _lines
 1656: @
 1657: SV3: _line1
 1658: @
 1659: SV4: _line2
 1660: @
 1661: Addr:'#4'945
 1662: EXECUTE
 1663: 0
 1664: 2
 1665: ARRAY_GETRANGE
 1666: ARRAY_VALS
 1667: POP
 1668: SV11: _sfx
 1669: !
 1670: SV12: _subbed
 1671: !
 1672: SV13: _pfx
 1673: !
 1674: SV12: _subbed
 1675: @
 1676: SV10: _fnd
 1677: @
 1678: SV9: _repl
 1679: @
 1680: Addr:'#4'1037
 1681: EXECUTE
 1682: 0
 1683: 1
 1684: ARRAY_GETRANGE
 1685: ARRAY_VALS
 1686: POP
 1687: SV12: _subbed
 1688: !
 1689: SV14: _changed
 1690: !
 1691: {
 1692: SV13: _pfx
 1693: @
 1694: SV12: _subbed
 1695: @
 1696: SV11: _sfx
 1697: @
 1698: }
 1699: ARRAY_MAKE
 1700: {
 1701: }
 1702: ARRAY_MAKE
 1703: SWAP
 1704: ARRAY_REVERSE
 1705: FOREACH
 1706: __FORITER__
 1707: JmpIfFalse: 1714
 1708: SWAP
 1709: POP
 1710: 0
 1711: SWAP
 1712: ARRAY_INSERTRANGE
 1713: JMP: 1706
 1714: __FORPOP__
 1715: SV0: _lines
 1716: !
 1717: SV14: _changed
 1718: @
 1719: "Changed %i lines."
 1720: FMTSTRING
 1721: LV0: me
 1722: @
 1723: SWAP
 1724: NOTIFY
 1725: 0
 1726: POP
 1727: SV0: _lines
 1728: @
 1729: SV3: _line1
 1730: @
 1731: SV4: _line2
 1732: @
 1733: LV10: lsedit__insert_pos
 1734: @
 1735: Addr:'#4'870
 1736: EXECUTE
 1737: POP
 1738: JMP: 1746
 1739: "Usage: .s [LINE[,LINE]]/FIND/REPLACE"
 1740: LV0: me
 1741: @
 1742: SWAP
 1743: NOTIFY
 1744: 0
 1745: POP
 1746: JMP: 2176
 1747: SV8: _swvar
 1748: @
 1749: ".d"
 1750: STRCMP
 1751: NOT
 1752: JmpIfFalse: 1858
 1753: SV0: _lines
 1754: @
 1755: ARRAY_COUNT
 1756: SV15: _oldcount
 1757: !
 1758: SV6: _cmdargs
 1759: @
 1760: 0
 1761: 0
 1762: Addr:'#4'1220
 1763: EXECUTE
 1764: 0
 1765: 1
 1766: ARRAY_GETRANGE
 1767: ARRAY_VALS
 1768: POP
 1769: SV4: _line2
 1770: !
 1771: SV3: _line1
 1772: !
 1773: SV3: _line1
 1774: @
 1775: NOT
 1776: DUP
 1777: NOT
 1778: JmpIfFalse: 1783
 1779: POP
 1780: SV4: _line2
 1781: @
 1782: NOT
 1783: JmpIfFalse: 1791
 1784: "Usage: .d LINENUM [LINENUM]"
 1785: LV0: me
 1786: @
 1787: SWAP
 1788: NOTIFY
 1789: 0
 1790: POP
 1791: SV0: _lines
 1792: @
 1793: SV3: _line1
 1794: @
 1795: 1
 1796: -
 1797: SV4: _line2
 1798: @
 1799: 1
 1800: -
 1801: ARRAY_DELRANGE
 1802: SV0: _lines
 1803: !
 1804: SV15: _oldcount
 1805: @
 1806: SV0: _lines
 1807: @
 1808: ARRAY_COUNT
 1809: -
 1810: "Deleted %i lines."
 1811: FMTSTRING
 1812: LV0: me
 1813: @
 1814: SWAP
 1815: NOTIFY
 1816: 0
 1817: POP
 1818: LV10: lsedit__insert_pos
 1819: @
 1820: SV3: _line1
 1821: @
 1822: >=
 1823: JmpIfFalse: 1847
 1824: LV10: lsedit__insert_pos
 1825: @
 1826: SV4: _line2
 1827: @
 1828: >
 1829: JmpIfFalse: 1843
 1830: LV10: lsedit__insert_pos
 1831: @
 1832: SV4: _line2
 1833: @
 1834: SV3: _line1
 1835: @
 1836: -
 1837: 1
 1838: +
 1839: -
 1840: LV10: lsedit__insert_pos
 1841: !
 1842: JMP: 1847
 1843: SV3: _line1
 1844: @
 1845: LV10: lsedit__insert_pos
 1846: !
 1847: LV10: lsedit__insert_pos
 1848: @
 1849: "Inserting at line %i"
 1850: FMTSTRING
 1851: LV0: me
 1852: @
 1853: SWAP
 1854: NOTIFY
 1855: 0
 1856: POP
 1857: JMP: 2176
 1858: SV8: _swvar
 1859: @
 1860: ".w"
 1861: STRCMP
 1862: NOT
 1863: JmpIfFalse: 2011
 1864: SV6: _cmdargs
 1865: @
 1866: "="
 1867: EXPLODE_ARRAY
 1868: SV6: _cmdargs
 1869: !
 1870: SV6: _cmdargs
 1871: @
 1872: NOT
 1873: JmpIfFalse: 1907
 1874: SV1: _obj
 1875: @
 1876: DUP
 1877: JmpIfFalse: 1881
 1878: POP
 1879: SV2: _prop
 1880: @
 1881: JmpIfFalse: 1899
 1882: SV1: _obj
 1883: @
 1884: SV2: _prop
 1885: @
 1886: SV0: _lines
 1887: @
 1888: ARRAY_PUT_PROPLIST
 1889: 0
 1890: POP
 1891: "Saved."
 1892: LV0: me
 1893: @
 1894: SWAP
 1895: NOTIFY
 1896: 0
 1897: POP
 1898: JMP: 1906
 1899: "Usage: .w OBJECT=LISTPROP"
 1900: LV0: me
 1901: @
 1902: SWAP
 1903: NOTIFY
 1904: 0
 1905: POP
 1906: JMP: 2010
 1907: SV6: _cmdargs
 1908: @
 1909: ARRAY_COUNT
 1910: 2
 1911: =
 1912: JmpIfFalse: 2003
 1913: SV6: _cmdargs
 1914: @
 1915: 0
 1916: 1
 1917: ARRAY_GETRANGE
 1918: ARRAY_VALS
 1919: POP
 1920: SV16: _savelist
 1921: !
 1922: SV17: _saveobj
 1923: !
 1924: SV17: _saveobj
 1925: @
 1926: MATCH
 1927: DUP
 1928: #-1
 1929: DBCMP
 1930: JmpIfFalse: 1935
 1931: LV0: me
 1932: @
 1933: "I don't see that here!"
 1934: NOTIFY
 1935: DUP
 1936: #-2
 1937: DBCMP
 1938: JmpIfFalse: 1943
 1939: LV0: me
 1940: @
 1941: "I don't know which one you mean!"
 1942: NOTIFY
 1943: DUP
 1944: #-3
 1945: DBCMP
 1946: JmpIfFalse: 1951
 1947: POP
 1948: LV0: me
 1949: @
 1950: GETLINK
 1951: DUP
 1952: OK?
 1953: JmpIfFalse: 1966
 1954: LV0: me
 1955: @
 1956: OVER
 1957: CONTROLS
 1958: NOT
 1959: JmpIfFalse: 1966
 1960: POP
 1961: #-1
 1962: LV0: me
 1963: @
 1964: "Permission denied."
 1965: NOTIFY
 1966: SV17: _saveobj
 1967: !
 1968: SV17: _saveobj
 1969: @
 1970: 0
 1971: <
 1972: JmpIfFalse: 1974
 1973: JMP: 2176
 1974: SV16: _savelist
 1975: @
 1976: NOT
 1977: JmpIfFalse: 1986
 1978: "Usage: .w [OBJECT=LISTPROP]"
 1979: LV0: me
 1980: @
 1981: SWAP
 1982: NOTIFY
 1983: 0
 1984: POP
 1985: JMP: 2176
 1986: SV17: _saveobj
 1987: @
 1988: SV16: _savelist
 1989: @
 1990: SV0: _lines
 1991: @
 1992: ARRAY_PUT_PROPLIST
 1993: 0
 1994: POP
 1995: "Saved."
 1996: LV0: me
 1997: @
 1998: SWAP
 1999: NOTIFY
 2000: 0
 2001: POP
 2002: JMP: 2010
 2003: "Usage: .w [OBJECT=LISTPROP]"
 2004: LV0: me
 2005: @
 2006: SWAP
 2007: NOTIFY
 2008: 0
 2009: POP
 2010: JMP: 2176
 2011: SV8: _swvar
 2012: @
 2013: ".f"
 2014: STRCMP
 2015: NOT
 2016: JmpIfFalse: 2164
 2017: {
 2018: SV6: _cmdargs
 2019: @
 2020: "="
 2021: SPLIT
 2022: }
 2023: ARRAY_MAKE
 2024: 0
 2025: 1
 2026: ARRAY_GETRANGE
 2027: ARRAY_VALS
 2028: POP
 2029: SV18: _cols
 2030: !
 2031: SV6: _cmdargs
 2032: !
 2033: SV6: _cmdargs
 2034: @
 2035: 1
 2036: 999999
 2037: Addr:'#4'1220
 2038: EXECUTE
 2039: 0
 2040: 1
 2041: ARRAY_GETRANGE
 2042: ARRAY_VALS
 2043: POP
 2044: SV4: _line2
 2045: !
 2046: SV3: _line1
 2047: !
 2048: SV18: _cols
 2049: @
 2050: JmpIfFalse: 2055
 2051: SV18: _cols
 2052: @
 2053: ATOI
 2054: JMP: 2056
 2055: 75
 2056: SV18: _cols
 2057: !
 2058: SV18: _cols
 2059: @
 2060: NOT
 2061: DUP
 2062: NOT
 2063: JmpIfFalse: 2075
 2064: POP
 2065: SV3: _line1
 2066: @
 2067: NOT
 2068: DUP
 2069: NOT
 2070: JmpIfFalse: 2075
 2071: POP
 2072: SV4: _line2
 2073: @
 2074: NOT
 2075: JmpIfFalse: 2084
 2076: "Usage: .f [L1,[L2]][=LISTPROP]"
 2077: LV0: me
 2078: @
 2079: SWAP
 2080: NOTIFY
 2081: 0
 2082: POP
 2083: JMP: 2176
 2084: SV0: _lines
 2085: @
 2086: SV3: _line1
 2087: @
 2088: SV4: _line2
 2089: @
 2090: Addr:'#4'945
 2091: EXECUTE
 2092: 0
 2093: 2
 2094: ARRAY_GETRANGE
 2095: ARRAY_VALS
 2096: POP
 2097: SV19: _sfx2
 2098: !
 2099: SV20: _mid
 2100: !
 2101: SV21: _pfx2
 2102: !
 2103: SV20: _mid
 2104: @
 2105: ARRAY_COUNT
 2106: SV22: _origcnt
 2107: !
 2108: SV20: _mid
 2109: @
 2110: SV18: _cols
 2111: @
 2112: Addr:'#4'1092
 2113: EXECUTE
 2114: SV20: _mid
 2115: !
 2116: {
 2117: SV21: _pfx2
 2118: @
 2119: SV20: _mid
 2120: @
 2121: SV19: _sfx2
 2122: @
 2123: }
 2124: ARRAY_MAKE
 2125: {
 2126: }
 2127: ARRAY_MAKE
 2128: SWAP
 2129: ARRAY_REVERSE
 2130: FOREACH
 2131: __FORITER__
 2132: JmpIfFalse: 2139
 2133: SWAP
 2134: POP
 2135: 0
 2136: SWAP
 2137: ARRAY_INSERTRANGE
 2138: JMP: 2131
 2139: __FORPOP__
 2140: SV0: _lines
 2141: !
 2142: SV22: _origcnt
 2143: @
 2144: "Formatted %i lines."
 2145: FMTSTRING
 2146: LV0: me
 2147: @
 2148: SWAP
 2149: NOTIFY
 2150: 0
 2151: POP
 2152: SV0: _lines
 2153: @
 2154: SV3: _line1
 2155: @
 2156: SV4: _line2
 2157: @
 2158: LV10: lsedit__insert_pos
 2159: @
 2160: Addr:'#4'870
 2161: EXECUTE
 2162: POP
 2163: JMP: 2176
 2164: {
 2165: SV7: _cmd
 2166: @
 2167: SV6: _cmdargs
 2168: @
 2169: SV0: _lines
 2170: @
 2171: }
 2172: ARRAY_MAKE
 2173: EXIT
 2174: JMP: 2176
 2175: JMP: 1412
 2176: JMP: 1307
 2177: 0
 2178: EXIT

 2179: Function: lsedit__basic (1 vars)
 2180: Addr:'#4'0
 2181: EXECUTE
 2182: POP
 2183: ""
 2184: Addr:'#4'116
 2185: EXECUTE
 2186: POP
 2187: ""
 2188: {
 2189: }
 2190: ARRAY_MAKE
 2191: "obj=list"
 2192: Addr:'#4'128
 2193: EXECUTE
 2194: POP
 2195: SV0: _arg
 2196: @
 2197: Addr:'#4'462
 2198: EXECUTE
 2199: SV1: _opts
 2200: !
 2201: SV1: _opts
 2202: @
 2203: NOT
 2204: JmpIfFalse: 2206
 2205: EXIT
 2206: SV1: _opts
 2207: @
 2208: "obj"
 2209: ARRAY_GETITEM
 2210: NOT
 2211: DUP
 2212: NOT
 2213: JmpIfFalse: 2220
 2214: POP
 2215: SV1: _opts
 2216: @
 2217: "list"
 2218: ARRAY_GETITEM
 2219: NOT
 2220: JmpIfFalse: 2225
 2221: Addr:'#4'328
 2222: EXECUTE
 2223: POP
 2224: EXIT
 2225: SV1: _opts
 2226: @
 2227: "obj"
 2228: ARRAY_GETITEM
 2229: MATCH
 2230: DUP
 2231: #-1
 2232: DBCMP
 2233: JmpIfFalse: 2238
 2234: LV0: me
 2235: @
 2236: "I don't see that here!"
 2237: NOTIFY
 2238: DUP
 2239: #-2
 2240: DBCMP
 2241: JmpIfFalse: 2246
 2242: LV0: me
 2243: @
 2244: "I don't know which one you mean!"
 2245: NOTIFY
 2246: DUP
 2247: #-3
 2248: DBCMP
 2249: JmpIfFalse: 2254
 2250: POP
 2251: LV0: me
 2252: @
 2253: GETLINK
 2254: DUP
 2255: OK?
 2256: JmpIfFalse: 2269
 2257: LV0: me
 2258: @
 2259: OVER
 2260: CONTROLS
 2261: NOT
 2262: JmpIfFalse: 2269
 2263: POP
 2264: #-1
 2265: LV0: me
 2266: @
 2267: "Permission denied."
 2268: NOTIFY
 2269: SV2: _obj
 2270: !
 2271: SV2: _obj
 2272: @
 2273: 0
 2274: <
 2275: JmpIfFalse: 2277
 2276: EXIT
 2277: 1
 2278: LV10: lsedit__insert_pos
 2279: !
 2280: SV2: _obj
 2281: @
 2282: SV1: _opts
 2283: @
 2284: "list"
 2285: ARRAY_GETITEM
 2286: ARRAY_GET_PROPLIST
 2287: SV5: _lines
 2288: !
 2289: SV5: _lines
 2290: @
 2291: 1
 2292: 999999
 2293: LV10: lsedit__insert_pos
 2294: @
 2295: Addr:'#4'870
 2296: EXECUTE
 2297: POP
 2298: 1
 2299: JmpIfFalse: 2343
 2300: SV5: _lines
 2301: @
 2302: SV2: _obj
 2303: @
 2304: SV1: _opts
 2305: @
 2306: "list"
 2307: ARRAY_GETITEM
 2308: Addr:'#4'1300
 2309: EXECUTE
 2310: 0
 2311: 2
 2312: ARRAY_GETRANGE
 2313: ARRAY_VALS
 2314: POP
 2315: SV5: _lines
 2316: !
 2317: SV4: _args
 2318: !
 2319: SV3: _cmd
 2320: !
 2321: SV3: _cmd
 2322: @
 2323: {
 2324: ".x"
 2325: ".q"
 2326: }
 2327: ARRAY_MAKE
 2328: SWAP
 2329: ARRAY_FINDVAL
 2330: JmpIfFalse: 2332
 2331: JMP: 2343
 2332: SV3: _cmd
 2333: @
 2334: "Unrecognized editor command '%s'."
 2335: FMTSTRING
 2336: LV0: me
 2337: @
 2338: SWAP
 2339: NOTIFY
 2340: 0
 2341: POP
 2342: JMP: 2298
 2343: {
 2344: SV3: _cmd
 2345: @
 2346: SV4: _args
 2347: @
 2348: SV5: _lines
 2349: @
 2350: }
 2351: ARRAY_MAKE
 2352: EXIT

 2353: Function: _main (1 vars)
 2354: Addr:'#4'786
 2355: EXECUTE
 2356: POP
 2357: SV0: _arg
 2358: @
 2359: Addr:'#4'2179
 2360: EXECUTE
 2361: EXIT

 2362: Function: __start (0 vars)
 2363: "me"
 2364: MATCH
 2365: LV0: me
 2366: !
 2367: LV0: me
 2368: @
 2369: LOCATION
 2370: LV1: loc
 2371: !
 2372: TRIG
 2373: LV2: trigger
 2374: !
 2375: ""
 2376: LV4: argparse__current_mode
 2377: !
 2378: {
 2379: }
 2380: ARRAY_MAKE
 2381: LV5: argparse__modes_list
 2382: !
 2383: {
 2384: }
 2385: 2
 2386: /
 2387: ARRAY_MAKE_DICT
 2388: LV6: argparse__flags_map
 2389: !
 2390: {
 2391: }
 2392: 2
 2393: /
 2394: ARRAY_MAKE_DICT
 2395: LV7: argparse__posargs_map
 2396: !
 2397: {
 2398: ""
 2399: "remainder"
 2400: }
 2401: 2
 2402: /
 2403: ARRAY_MAKE_DICT
 2404: LV8: argparse__remainder_map
 2405: !
 2406: {
 2407: }
 2408: ARRAY_MAKE
 2409: LV9: lsedit__help_lines
 2410: !
 2411: Addr:'#4'2353
 2412: EXECUTE
 2413: EXIT

#### Executing Tokens #################################
New process: pid=1
 2362: #4 line 319 ("") Function: __start (0 vars)
 2363: #4 line 319 ("") "me"
 2364: #4 line 319 ("", "me") MATCH
 2365: #4 line 319 ("", #5) LV0: me
 2366: #4 line 319 ("", #5, LV0) !
 2367: #4 line 319 ("") LV0: me
 2368: #4 line 319 ("", LV0) @
 2369: #4 line 319 ("", #5) LOCATION
 2370: #4 line 319 ("", #2) LV1: loc
 2371: #4 line 319 ("", #2, LV1) !
 2372: #4 line 319 ("") TRIG
 2373: #4 line 319 ("", #3) LV2: trigger
 2374: #4 line 319 ("", #3, LV2) !
 2375: #4 line 319 ("") ""
 2376: #4 line 319 ("", "") LV4: argparse__current_mode
 2377: #4 line 319 ("", "", LV4) !
 2378: #4 line 319 ("") {
 2379: #4 line 319 ("", Mark) }
 2380: #4 line 319 ("", 0) ARRAY_MAKE
 2381: #4 line 319 ("", 0[]) LV5: argparse__modes_list
 2382: #4 line 319 ("", 0[], LV5) !
 2383: #4 line 319 ("") {
 2384: #4 line 319 ("", Mark) }
 2385: #4 line 319 ("", 0) 2
 2386: #4 line 319 ("", 0, 2) /
 2387: #4 line 319 ("", 0) ARRAY_MAKE_DICT
 2388: #4 line 319 ("", 0{}) LV6: argparse__flags_map
 2389: #4 line 319 ("", 0{}, LV6) !
 2390: #4 line 319 ("") {
 2391: #4 line 319 ("", Mark) }
 2392: #4 line 319 ("", 0) 2
 2393: #4 line 319 ("", 0, 2) /
 2394: #4 line 319 ("", 0) ARRAY_MAKE_DICT
 2395: #4 line 319 ("", 0{}) LV7: argparse__posargs_map
 2396: #4 line 319 ("", 0{}, LV7) !
 2397: #4 line 319 ("") {
 2398: #4 line 319 ("", Mark) ""
 2399: #4 line 319 ("", Mark, "") "remainder"
 2400: #4 line 319 ("", Mark, "", "remainder") }
 2401: #4 line 319 ("", "", "remainder", 2) 2
 2402: #4 line 319 ("", "", "remainder", 2, 2) /
 2403: #4 line 319 ("", "", "remainder", 1) ARRAY_MAKE_DICT
 2404: #4 line 319 ("", 1{"": "remainder"}) LV8: argparse__remainder_map
 2405: #4 line 319 ("", 1{"": "remainder"}, LV8) !
 2406: #4 line 22 ("") {
 2407: #4 line 22 ("", Mark) }
 2408: #4 line 22 ("", 0) ARRAY_MAKE
 2409: #4 line 22 ("", 0[]) LV9: lsedit__help_lines
 2410: #4 line 22 ("", 0[], LV9) !
 2411: #4 line 22 ("") Addr:'#4'2353
 2412: #4 line 22 ("", Addr:'#4'2353) EXECUTE
 2353: #4 line 319 ("") Function: _main (1 vars)
 2354: #4 line 320 () Addr:'#4'786
 2355: #4 line 320 (Addr:'#4'786) EXECUTE
  786: #4 line 26 () Function: lsedit__init_help (0 vars)
  787: #4 line 27 () {
  788: #4 line 27 (Mark) }
  789: #4 line 27 (0) ARRAY_MAKE
  790: #4 line 27 (0[]) LV9: lsedit__help_lines
  791: #4 line 27 (0[], LV9) !
  792: #4 line 27 () 0
  793: #4 line 28 (0) EXIT
 2356: #4 line 320 (0) POP
 2357: #4 line 321 () SV0: _arg
 2358: #4 line 321 (SV0) @
 2359: #4 line 321 ("") Addr:'#4'2179
 2360: #4 line 321 ("", Addr:'#4'2179) EXECUTE
 2179: #4 line 285 ("") Function: lsedit__basic (1 vars)
 2180: #4 line 286 () Addr:'#4'0
 2181: #4 line 286 (Addr:'#4'0) EXECUTE
    0: #4 line 15 () Function: argparse__init (0 vars)
    1: #4 line 15 () ""
    2: #4 line 15 ("") LV4: argparse__current_mode
    3: #4 line 15 ("", LV4) !
    4: #4 line 15 () {
    5: #4 line 15 (Mark) }
    6: #4 line 15 (0) ARRAY_MAKE
    7: #4 line 15 (0[]) LV5: argparse__modes_list
    8: #4 line 15 (0[], LV5) !
    9: #4 line 15 () {
   10: #4 line 15 (Mark) }
   11: #4 line 15 (0) 2
   12: #4 line 15 (0, 2) /
   13: #4 line 15 (0) ARRAY_MAKE_DICT
   14: #4 line 15 (0{}) LV6: argparse__flags_map
   15: #4 line 15 (0{}, LV6) !
   16: #4 line 15 () {
   17: #4 line 15 (Mark) }
   18: #4 line 15 (0) 2
   19: #4 line 15 (0, 2) /
   20: #4 line 15 (0) ARRAY_MAKE_DICT
   21: #4 line 15 (0{}) LV7: argparse__posargs_map
   22: #4 line 15 (0{}, LV7) !
   23: #4 line 15 () {
   24: #4 line 15 (Mark) ""
   25: #4 line 15 (Mark, "") "remainder"
   26: #4 line 15 (Mark, "", "remainder") }
   27: #4 line 15 ("", "remainder", 2) 2
   28: #4 line 15 ("", "remainder", 2, 2) /
   29: #4 line 15 ("", "remainder", 1) ARRAY_MAKE_DICT
   30: #4 line 15 (1{"": "remainder"}) LV8: argparse__remainder_map
   31: #4 line 15 (1{"": "remainder"}, LV8) !
   32: #4 line 15 () 0
   33: #4 line 15 (0) EXIT
 2182: #4 line 286 (0) POP
 2183: #4 line 287 () ""
 2184: #4 line 287 ("") Addr:'#4'116
 2185: #4 line 287 ("", Addr:'#4'116) EXECUTE
  116: #4 line 15 ("") Function: argparse__set_mode (1 vars)
  117: #4 line 15 () SV0: _name
  118: #4 line 15 (SV0) @
  119: #4 line 15 ("") TOLOWER
  120: #4 line 15 ("") SV0: _name
  121: #4 line 15 ("", SV0) !
  122: #4 line 15 () SV0: _name
  123: #4 line 15 (SV0) @
  124: #4 line 15 ("") LV4: argparse__current_mode
  125: #4 line 15 ("", LV4) !
  126: #4 line 15 () 0
  127: #4 line 15 (0) EXIT
 2186: #4 line 287 (0) POP
 2187: #4 line 288 () ""
 2188: #4 line 288 ("") {
 2189: #4 line 288 ("", Mark) }
 2190: #4 line 288 ("", 0) ARRAY_MAKE
 2191: #4 line 288 ("", 0[]) "obj=list"
 2192: #4 line 288 ("", 0[], "obj=list") Addr:'#4'128
 2193: #4 line 288 ("", 0[], "obj=list", Addr:'#4'128) EXECUTE
  128: #4 line 15 ("", 0[], "obj=list") Function: argparse__add_mode (3 vars)
  129: #4 line 15 () SV0: _name
  130: #4 line 15 (SV0) @
  131: #4 line 15 ("") TOLOWER
  132: #4 line 15 ("") SV0: _name
  133: #4 line 15 ("", SV0) !
  134: #4 line 15 () LV5: argparse__modes_list
  135: #4 line 15 (LV5) @
  136: #4 line 15 (0[]) SV0: _name
  137: #4 line 15 (0[], SV0) @
  138: #4 line 15 (0[], "") SWAP
  139: #4 line 15 ("", 0[]) ARRAY_APPENDITEM
  140: #4 line 15 (1[""]) LV5: argparse__modes_list
  141: #4 line 15 (1[""], LV5) !
  142: #4 line 15 () {
  143: #4 line 15 (Mark) }
  144: #4 line 15 (0) ARRAY_MAKE
  145: #4 line 15 (0[]) LV6: argparse__flags_map
  146: #4 line 15 (0[], LV6) @
  147: #4 line 15 (0[], 0{}) SV0: _name
  148: #4 line 15 (0[], 0{}, SV0) @
  149: #4 line 15 (0[], 0{}, "") ARRAY_SETITEM
  150: #4 line 15 (1{"": 0[]}) LV6: argparse__flags_map
  151: #4 line 15 (1{"": 0[]}, LV6) !
  152: #4 line 15 () {
  153: #4 line 15 (Mark) }
  154: #4 line 15 (0) ARRAY_MAKE
  155: #4 line 15 (0[]) LV7: argparse__posargs_map
  156: #4 line 15 (0[], LV7) @
  157: #4 line 15 (0[], 0{}) SV0: _name
  158: #4 line 15 (0[], 0{}, SV0) @
  159: #4 line 15 (0[], 0{}, "") ARRAY_SETITEM
  160: #4 line 15 (1{"": 0[]}) LV7: argparse__posargs_map
  161: #4 line 15 (1{"": 0[]}, LV7) !
  162: #4 line 15 () SV1: _flags
  163: #4 line 15 (SV1) @
  164: #4 line 15 (0[]) FOREACH
  165: #4 line 15 () __FORITER__
  166: #4 line 15 (0) JmpIfFalse: 205
  205: #4 line 15 () __FORPOP__
  206: #4 line 15 () SV0: _name
  207: #4 line 15 (SV0) @
  208: #4 line 15 ("") SV2: _posargs
  209: #4 line 15 ("", SV2) @
  210: #4 line 15 ("", "obj=list") Addr:'#4'34
  211: #4 line 15 ("", "obj=list", Addr:'#4'34) EXECUTE
   34: #4 line 15 ("", "obj=list") Function: argparse__parse_posargs (2 vars)
   35: #4 line 15 () {
   36: #4 line 15 (Mark) SV1: _posargs
   37: #4 line 15 (Mark, SV1) @
   38: #4 line 15 (Mark, "obj=list") "^([a-z0-9_]*)([^a-z0-9_])(.*)$"
   39: #4 line 15 (Mark, "obj=list", "^([a-z0-9_]*)([^a-z0-9_])(.*)$") 1
   40: #4 line 15 (Mark, "obj=list", "^([a-z0-9_]*)([^a-z0-9_])(.*)$", 1) REGEXP
   41: #4 line 15 (Mark, 4["obj=list", "obj", "=", "list"], 4[2[0, 8], 2[0, 3], 2[3, 4], 2[4, 8]]) }
   42: #4 line 15 (4["obj=list", "obj", "=", "list"], 4[2[0, 8], 2[0, 3], 2[3, 4], 2[4, 8]], 2) ARRAY_MAKE
   43: #4 line 15 (2[4["obj=list", "obj", "=", "list"], 4[2[0, 8], 2[0, 3], 2[3, 4], 2[4, 8]]]) 0
   44: #4 line 15 (2[4["obj=list", "obj", "=", "list"], 4[2[0, 8], 2[0, 3], 2[3, 4], 2[4, 8]]], 0) ARRAY_GETITEM
   45: #4 line 15 (4["obj=list", "obj", "=", "list"]) SV2: _tok
   46: #4 line 15 (4["obj=list", "obj", "=", "list"], SV2) !
   47: #4 line 15 () SV2: _tok
   48: #4 line 15 (SV2) @
   49: #4 line 15 (4["obj=list", "obj", "=", "list"]) JmpIfFalse: 100
   50: #4 line 15 () LV7: argparse__posargs_map
   51: #4 line 15 (LV7) @
   52: #4 line 15 (1{"": 0[]}) SV0: _mode
   53: #4 line 15 (1{"": 0[]}, SV0) @
   54: #4 line 15 (1{"": 0[]}, "") ARRAY_GETITEM
   55: #4 line 15 (0[]) NOT
   56: #4 line 15 (1) JmpIfFalse: 67
   57: #4 line 15 () {
   58: #4 line 15 (Mark) }
   59: #4 line 15 (0) ARRAY_MAKE
   60: #4 line 15 (0[]) LV7: argparse__posargs_map
   61: #4 line 15 (0[], LV7) @
   62: #4 line 15 (0[], 1{"": 0[]}) SV0: _mode
   63: #4 line 15 (0[], 1{"": 0[]}, SV0) @
   64: #4 line 15 (0[], 1{"": 0[]}, "") ARRAY_SETITEM
   65: #4 line 15 (1{"": 0[]}) LV7: argparse__posargs_map
   66: #4 line 15 (1{"": 0[]}, LV7) !
   67: #4 line 15 () LV7: argparse__posargs_map
   68: #4 line 15 (LV7) @
   69: #4 line 15 (1{"": 0[]}) SV0: _mode
   70: #4 line 15 (1{"": 0[]}, SV0) @
   71: #4 line 15 (1{"": 0[]}, "") OVER
   72: #4 line 15 (1{"": 0[]}, "", 1{"": 0[]}) OVER
   73: #4 line 15 (1{"": 0[]}, "", 1{"": 0[]}, "") ARRAY_GETITEM
   74: #4 line 15 (1{"": 0[]}, "", 0[]) {
   75: #4 line 15 (1{"": 0[]}, "", 0[], Mark) SV2: _tok
   76: #4 line 15 (1{"": 0[]}, "", 0[], Mark, SV2) @
   77: #4 line 15 (1{"": 0[]}, "", 0[], Mark, 4["obj=list", "obj", "=", "list"]) 1
   78: #4 line 15 (1{"": 0[]}, "", 0[], Mark, 4["obj=list", "obj", "=", "list"], 1) ARRAY_GETITEM
   79: #4 line 15 (1{"": 0[]}, "", 0[], Mark, "obj") TOLOWER
   80: #4 line 15 (1{"": 0[]}, "", 0[], Mark, "obj") SV2: _tok
   81: #4 line 15 (1{"": 0[]}, "", 0[], Mark, "obj", SV2) @
   82: #4 line 15 (1{"": 0[]}, "", 0[], Mark, "obj", 4["obj=list", "obj", "=", "list"]) 2
   83: #4 line 15 (1{"": 0[]}, "", 0[], Mark, "obj", 4["obj=list", "obj", "=", "list"], 2) ARRAY_GETITEM
   84: #4 line 15 (1{"": 0[]}, "", 0[], Mark, "obj", "=") }
   85: #4 line 15 (1{"": 0[]}, "", 0[], "obj", "=", 2) ARRAY_MAKE
   86: #4 line 15 (1{"": 0[]}, "", 0[], 2["obj", "="]) SWAP
   87: #4 line 15 (1{"": 0[]}, "", 2["obj", "="], 0[]) ARRAY_APPENDITEM
   88: #4 line 15 (1{"": 0[]}, "", 1[2["obj", "="]]) ROT
   89: #4 line 15 ("", 1[2["obj", "="]], 1{"": 0[]}) ROT
   90: #4 line 15 (1[2["obj", "="]], 1{"": 0[]}, "") ARRAY_SETITEM
   91: #4 line 15 (1{"": 1[2["obj", "="]]}) LV7: argparse__posargs_map
   92: #4 line 15 (1{"": 1[2["obj", "="]]}, LV7) !
   93: #4 line 15 () SV2: _tok
   94: #4 line 15 (SV2) @
   95: #4 line 15 (4["obj=list", "obj", "=", "list"]) 3
   96: #4 line 15 (4["obj=list", "obj", "=", "list"], 3) ARRAY_GETITEM
   97: #4 line 15 ("list") SV1: _posargs
   98: #4 line 15 ("list", SV1) !
   99: #4 line 15 () JMP: 111
  111: #4 line 15 () 1
  112: #4 line 15 (1) NOT
  113: #4 line 15 (0) JmpIfFalse: 35
   35: #4 line 15 () {
   36: #4 line 15 (Mark) SV1: _posargs
   37: #4 line 15 (Mark, SV1) @
   38: #4 line 15 (Mark, "list") "^([a-z0-9_]*)([^a-z0-9_])(.*)$"
   39: #4 line 15 (Mark, "list", "^([a-z0-9_]*)([^a-z0-9_])(.*)$") 1
   40: #4 line 15 (Mark, "list", "^([a-z0-9_]*)([^a-z0-9_])(.*)$", 1) REGEXP
   41: #4 line 15 (Mark, 0[], 0[]) }
   42: #4 line 15 (0[], 0[], 2) ARRAY_MAKE
   43: #4 line 15 (2[0[], 0[]]) 0
   44: #4 line 15 (2[0[], 0[]], 0) ARRAY_GETITEM
   45: #4 line 15 (0[]) SV2: _tok
   46: #4 line 15 (0[], SV2) !
   47: #4 line 15 () SV2: _tok
   48: #4 line 15 (SV2) @
   49: #4 line 15 (0[]) JmpIfFalse: 100
  100: #4 line 15 () SV1: _posargs
  101: #4 line 15 (SV1) @
  102: #4 line 15 ("list") TOLOWER
  103: #4 line 15 ("list") LV8: argparse__remainder_map
  104: #4 line 15 ("list", LV8) @
  105: #4 line 15 ("list", 1{"": "remainder"}) SV0: _mode
  106: #4 line 15 ("list", 1{"": "remainder"}, SV0) @
  107: #4 line 15 ("list", 1{"": "remainder"}, "") ARRAY_SETITEM
  108: #4 line 15 (1{"": "list"}) LV8: argparse__remainder_map
  109: #4 line 15 (1{"": "list"}, LV8) !
  110: #4 line 15 () JMP: 114
  114: #4 line 15 () 0
  115: #4 line 15 (0) EXIT
  212: #4 line 15 (0) POP
  213: #4 line 15 () 0
  214: #4 line 15 (0) EXIT
 2194: #4 line 288 (0) POP
 2195: #4 line 289 () SV0: _arg
 2196: #4 line 289 (SV0) @
 2197: #4 line 289 ("") Addr:'#4'462
 2198: #4 line 289 ("", Addr:'#4'462) EXECUTE
  462: #4 line 15 ("") Function: argparse__parse (1 vars)
  463: #4 line 15 () {
  464: #4 line 15 (Mark) }
  465: #4 line 15 (0) 2
  466: #4 line 15 (0, 2) /
  467: #4 line 15 (0) ARRAY_MAKE_DICT
  468: #4 line 15 (0{}) SV4: _opts
  469: #4 line 15 (0{}, SV4) !
  470: #4 line 15 () 0
  471: #4 line 15 (0) SV5: _mode_given
  472: #4 line 15 (0, SV5) !
  473: #4 line 15 () SV0: _line
  474: #4 line 15 (SV0) @
  475: #4 line 15 ("") "#"
  476: #4 line 15 ("", "#") STRINGPFX
  477: #4 line 15 (0) JmpIfFalse: 700
  700: #4 line 15 () SV5: _mode_given
  701: #4 line 15 (SV5) @
  702: #4 line 15 (0) 1
  703: #4 line 15 (0, 1) >
  704: #4 line 15 (0) JmpIfFalse: 719
  719: #4 line 15 () LV7: argparse__posargs_map
  720: #4 line 15 (LV7) @
  721: #4 line 15 (1{"": 1[2["obj", "="]]}) LV4: argparse__current_mode
  722: #4 line 15 (1{"": 1[2["obj", "="]]}, LV4) @
  723: #4 line 15 (1{"": 1[2["obj", "="]]}, "") ARRAY_GETITEM
  724: #4 line 15 (1[2["obj", "="]]) FOREACH
  725: #4 line 15 () __FORITER__
  726: #4 line 15 (0, 2["obj", "="], 1) JmpIfFalse: 762
  727: #4 line 15 (0, 2["obj", "="]) SV9: _posarg
  728: #4 line 15 (0, 2["obj", "="], SV9) !
  729: #4 line 15 (0) POP
  730: #4 line 15 () {
  731: #4 line 15 (Mark) SV0: _line
  732: #4 line 15 (Mark, SV0) @
  733: #4 line 15 (Mark, "") SV9: _posarg
  734: #4 line 15 (Mark, "", SV9) @
  735: #4 line 15 (Mark, "", 2["obj", "="]) 1
  736: #4 line 15 (Mark, "", 2["obj", "="], 1) ARRAY_GETITEM
  737: #4 line 15 (Mark, "", "=") SPLIT
  738: #4 line 15 (Mark, "", "") }
  739: #4 line 15 ("", "", 2) ARRAY_MAKE
  740: #4 line 15 (2["", ""]) SV1: _parts
  741: #4 line 15 (2["", ""], SV1) !
  742: #4 line 15 () SV1: _parts
  743: #4 line 15 (SV1) @
  744: #4 line 15 (2["", ""]) 0
  745: #4 line 15 (2["", ""], 0) ARRAY_GETITEM
  746: #4 line 15 ("") SV4: _opts
  747: #4 line 15 ("", SV4) @
  748: #4 line 15 ("", 0{}) SV9: _posarg
  749: #4 line 15 ("", 0{}, SV9) @
  750: #4 line 15 ("", 0{}, 2["obj", "="]) 0
  751: #4 line 15 ("", 0{}, 2["obj", "="], 0) ARRAY_GETITEM
  752: #4 line 15 ("", 0{}, "obj") ARRAY_SETITEM
  753: #4 line 15 (1{"obj": ""}) SV4: _opts
  754: #4 line 15 (1{"obj": ""}, SV4) !
  755: #4 line 15 () SV1: _parts
  756: #4 line 15 (SV1) @
  757: #4 line 15 (2["", ""]) 1
  758: #4 line 15 (2["", ""], 1) ARRAY_GETITEM
  759: #4 line 15 ("") SV0: _line
  760: #4 line 15 ("", SV0) !
  761: #4 line 15 () JMP: 725
  725: #4 line 15 () __FORITER__
  726: #4 line 15 (0) JmpIfFalse: 762
  762: #4 line 15 () __FORPOP__
  763: #4 line 15 () SV0: _line
  764: #4 line 15 (SV0) @
  765: #4 line 15 ("") SV4: _opts
  766: #4 line 15 ("", SV4) @
  767: #4 line 15 ("", 1{"obj": ""}) LV8: argparse__remainder_map
  768: #4 line 15 ("", 1{"obj": ""}, LV8) @
  769: #4 line 15 ("", 1{"obj": ""}, 1{"": "list"}) LV4: argparse__current_mode
  770: #4 line 15 ("", 1{"obj": ""}, 1{"": "list"}, LV4) @
  771: #4 line 15 ("", 1{"obj": ""}, 1{"": "list"}, "") ARRAY_GETITEM
  772: #4 line 15 ("", 1{"obj": ""}, "list") ARRAY_SETITEM
  773: #4 line 15 (2{"list": "", "obj": ""}) SV4: _opts
  774: #4 line 15 (2{"list": "", "obj": ""}, SV4) !
  775: #4 line 15 () LV4: argparse__current_mode
  776: #4 line 15 (LV4) @
  777: #4 line 15 ("") SV4: _opts
  778: #4 line 15 ("", SV4) @
  779: #4 line 15 ("", 2{"list": "", "obj": ""}) "mode"
  780: #4 line 15 ("", 2{"list": "", "obj": ""}, "mode") ARRAY_SETITEM
  781: #4 line 15 (3{"list": "", "mode": "", "obj": ""}) SV4: _opts
  782: #4 line 15 (3{"list": "", "mode": "", "obj": ""}, SV4) !
  783: #4 line 15 () SV4: _opts
  784: #4 line 15 (SV4) @
  785: #4 line 15 (3{"list": "", "mode": "", "obj": ""}) EXIT
 2199: #4 line 289 (3{"list": "", "mode": "", "obj": ""}) SV1: _opts
 2200: #4 line 289 (3{"list": "", "mode": "", "obj": ""}, SV1) !
 2201: #4 line 290 () SV1: _opts
 2202: #4 line 290 (SV1) @
 2203: #4 line 290 (3{"list": "", "mode": "", "obj": ""}) NOT
 2204: #4 line 290 (0) JmpIfFalse: 2206
 2206: #4 line 291 () SV1: _opts
 2207: #4 line 291 (SV1) @
 2208: #4 line 291 (3{"list": "", "mode": "", "obj": ""}) "obj"
 2209: #4 line 291 (3{"list": "", "mode": "", "obj": ""}, "obj") ARRAY_GETITEM
 2210: #4 line 291 ("") NOT
 2211: #4 line 291 (1) DUP
 2212: #4 line 291 (1, 1) NOT
 2213: #4 line 291 (1, 0) JmpIfFalse: 2220
 2220: #4 line 291 (1) JmpIfFalse: 2225
 2221: #4 line 292 () Addr:'#4'328
 2222: #4 line 292 (Addr:'#4'328) EXECUTE
  328: #4 line 15 () Function: argparse__show_usage (0 vars)
  329: #4 line 15 () TRIG
  330: #4 line 15 (#3) NAME
  331: #4 line 15 ("test") ";"
  332: #4 line 15 ("test", ";") SPLIT
  333: #4 line 15 ("test", "") POP
  334: #4 line 15 ("test") STRIPLEAD
  335: #4 line 15 ("test") STRIPTAIL
  336: #4 line 15 ("test") SV0: _cmd
  337: #4 line 15 ("test", SV0) !
  338: #4 line 15 () "Usage:"
  339: #4 line 15 ("Usage:") LV0: me
  340: #4 line 15 ("Usage:", LV0) @
  341: #4 line 15 ("Usage:", #5) SWAP
  342: #4 line 15 (#5, "Usage:") NOTIFY
NOTIFY: Usage:
  343: #4 line 15 () 0
  344: #4 line 15 (0) POP
  345: #4 line 15 () LV5: argparse__modes_list
  346: #4 line 15 (LV5) @
  347: #4 line 15 (1[""]) FOREACH
  348: #4 line 15 () __FORITER__
  349: #4 line 15 (0, "", 1) JmpIfFalse: 459
  350: #4 line 15 (0, "") SV1: _mode
  351: #4 line 15 (0, "", SV1) !
  352: #4 line 15 (0) POP
  353: #4 line 15 () {
  354: #4 line 15 (Mark) }
  355: #4 line 15 (0) ARRAY_MAKE
  356: #4 line 15 (0[]) LV6: argparse__flags_map
  357: #4 line 15 (0[], LV6) @
  358: #4 line 15 (0[], 1{"": 0[]}) SV1: _mode
  359: #4 line 15 (0[], 1{"": 0[]}, SV1) @
  360: #4 line 15 (0[], 1{"": 0[]}, "") ARRAY_GETITEM
  361: #4 line 15 (0[], 0[]) FOREACH
  362: #4 line 15 (0[]) __FORITER__
  363: #4 line 15 (0[], 0) JmpIfFalse: 379
  379: #4 line 15 (0[]) __FORPOP__
  380: #4 line 15 (0[]) SV3: _flags
  381: #4 line 15 (0[], SV3) !
  382: #4 line 15 () {
  383: #4 line 15 (Mark) }
  384: #4 line 15 (0) ARRAY_MAKE
  385: #4 line 15 (0[]) LV7: argparse__posargs_map
  386: #4 line 15 (0[], LV7) @
  387: #4 line 15 (0[], 1{"": 1[2["obj", "="]]}) SV1: _mode
  388: #4 line 15 (0[], 1{"": 1[2["obj", "="]]}, SV1) @
  389: #4 line 15 (0[], 1{"": 1[2["obj", "="]]}, "") ARRAY_GETITEM
  390: #4 line 15 (0[], 1[2["obj", "="]]) FOREACH
  391: #4 line 15 (0[]) __FORITER__
  392: #4 line 15 (0[], 0, 2["obj", "="], 1) JmpIfFalse: 413
  393: #4 line 15 (0[], 0, 2["obj", "="]) SV4: _posarg
  394: #4 line 15 (0[], 0, 2["obj", "="], SV4) !
  395: #4 line 15 (0[], 0) POP
  396: #4 line 15 (0[]) {
  397: #4 line 15 (0[], Mark) SV4: _posarg
  398: #4 line 15 (0[], Mark, SV4) @
  399: #4 line 15 (0[], Mark, 2["obj", "="]) 0
  400: #4 line 15 (0[], Mark, 2["obj", "="], 0) ARRAY_GETITEM
  401: #4 line 15 (0[], Mark, "obj") TOUPPER
  402: #4 line 15 (0[], Mark, "OBJ") SV4: _posarg
  403: #4 line 15 (0[], Mark, "OBJ", SV4) @
  404: #4 line 15 (0[], Mark, "OBJ", 2["obj", "="]) 1
  405: #4 line 15 (0[], Mark, "OBJ", 2["obj", "="], 1) ARRAY_GETITEM
  406: #4 line 15 (0[], Mark, "OBJ", "=") }
  407: #4 line 15 (0[], "OBJ", "=", 2) ARRAY_MAKE
  408: #4 line 15 (0[], 2["OBJ", "="]) ""
  409: #4 line 15 (0[], 2["OBJ", "="], "") ARRAY_JOIN
  410: #4 line 15 (0[], "OBJ=") SWAP
  411: #4 line 15 ("OBJ=", 0[]) ARRAY_APPENDITEM
  412: #4 line 15 (1["OBJ="]) JMP: 391
  391: #4 line 15 (1["OBJ="]) __FORITER__
  392: #4 line 15 (1["OBJ="], 0) JmpIfFalse: 413
  413: #4 line 15 (1["OBJ="]) __FORPOP__
  414: #4 line 15 (1["OBJ="]) SV5: _posargs
  415: #4 line 15 (1["OBJ="], SV5) !
  416: #4 line 15 () LV8: argparse__remainder_map
  417: #4 line 15 (LV8) @
  418: #4 line 15 (1{"": "list"}) SV1: _mode
  419: #4 line 15 (1{"": "list"}, SV1) @
  420: #4 line 15 (1{"": "list"}, "") ARRAY_GETITEM
  421: #4 line 15 ("list") TOUPPER
  422: #4 line 15 ("LIST") SV5: _posargs
  423: #4 line 15 ("LIST", SV5) @
  424: #4 line 15 ("LIST", 1["OBJ="]) ""
  425: #4 line 15 ("LIST", 1["OBJ="], "") ARRAY_JOIN
  426: #4 line 15 ("LIST", "OBJ=") SV3: _flags
  427: #4 line 15 ("LIST", "OBJ=", SV3) @
  428: #4 line 15 ("LIST", "OBJ=", 0[]) JmpIfFalse: 431
  431: #4 line 15 ("LIST", "OBJ=") ""
  432: #4 line 15 ("LIST", "OBJ=", "") SV3: _flags
  433: #4 line 15 ("LIST", "OBJ=", "", SV3) @
  434: #4 line 15 ("LIST", "OBJ=", "", 0[]) " "
  435: #4 line 15 ("LIST", "OBJ=", "", 0[], " ") ARRAY_JOIN
  436: #4 line 15 ("LIST", "OBJ=", "", "") SV1: _mode
  437: #4 line 15 ("LIST", "OBJ=", "", "", SV1) @
  438: #4 line 15 ("LIST", "OBJ=", "", "", "") SV1: _mode
  439: #4 line 15 ("LIST", "OBJ=", "", "", "", SV1) @
  440: #4 line 15 ("LIST", "OBJ=", "", "", "", "") JmpIfFalse: 443
  443: #4 line 15 ("LIST", "OBJ=", "", "", "") ""
  444: #4 line 15 ("LIST", "OBJ=", "", "", "", "") SV0: _cmd
  445: #4 line 15 ("LIST", "OBJ=", "", "", "", "", SV0) @
  446: #4 line 15 ("LIST", "OBJ=", "", "", "", "", "test") "%s %s%s %s%s%s%s"
  447: #4 line 15 ("LIST", "OBJ=", "", "", "", "", "test", "%s %s%s %s%s%s%s") FMTSTRING
  448: #4 line 15 ("test  OBJ=LIST") SV6: _line
  449: #4 line 15 ("test  OBJ=LIST", SV6) !
  450: #4 line 15 () SV6: _line
  451: #4 line 15 (SV6) @
  452: #4 line 15 ("test  OBJ=LIST") LV0: me
  453: #4 line 15 ("test  OBJ=LIST", LV0) @
  454: #4 line 15 ("test  OBJ=LIST", #5) SWAP
  455: #4 line 15 (#5, "test  OBJ=LIST") NOTIFY
NOTIFY: test  OBJ=LIST
  456: #4 line 15 () 0
  457: #4 line 15 (0) POP
  458: #4 line 15 () JMP: 348
  348: #4 line 15 () __FORITER__
  349: #4 line 15 (0) JmpIfFalse: 459
  459: #4 line 15 () __FORPOP__
  460: #4 line 15 () 0
  461: #4 line 15 (0) EXIT
 2223: #4 line 292 (0) POP
 2224: #4 line 293 () EXIT
 2361: #4 line 322 () EXIT
 2413: #4 line 22 () EXIT
Process exited: pid=1
Program exited.
Execution completed in 509 steps.

