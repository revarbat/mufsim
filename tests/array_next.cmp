#### Compiling MUF Code to Tokens #####################

#### Showing Compiled Tokens ##########################
    0: Function: main (0 vars)
    1: 0
    2: ARRAY_MAKE
    3: 0
    4: ARRAY_NEXT
    5: POP
    6: POP
    7: 0
    8: ARRAY_MAKE_DICT
    9: 0
   10: ARRAY_NEXT
   11: POP
   12: POP
   13: {
   14: 5
   15: 4
   16: 3
   17: }
   18: ARRAY_MAKE
   19: DUP
   20: ARRAY_FIRST
   21: JmpIfFalse: +5
   22: OVER
   23: SWAP
   24: ARRAY_NEXT
   25: JMP: -4
   26: POP
   27: POP
   28: {
   29: "c"
   30: 5
   31: "b"
   32: 4
   33: "a"
   34: 3
   35: }
   36: 2
   37: /
   38: ARRAY_MAKE_DICT
   39: DUP
   40: ARRAY_FIRST
   41: JmpIfFalse: +5
   42: OVER
   43: SWAP
   44: ARRAY_NEXT
   45: JMP: -4
   46: POP
   47: POP
   48: EXIT

#### Executing Tokens #################################
    0: line 1 ("") Function: main (0 vars)
    1: line 2 ("") 0
    2: line 2 ("", 0) ARRAY_MAKE
    3: line 2 ("", 0[]) 0
    4: line 2 ("", 0[], 0) ARRAY_NEXT
    5: line 2 ("", 0, 0) POP
    6: line 2 ("", 0) POP
    7: line 4 ("") 0
    8: line 4 ("", 0) ARRAY_MAKE_DICT
    9: line 4 ("", 0{}) 0
   10: line 4 ("", 0{}, 0) ARRAY_NEXT
   11: line 4 ("", 0, 0) POP
   12: line 4 ("", 0) POP
   13: line 6 ("") {
   14: line 6 ("", Mark) 5
   15: line 6 ("", Mark, 5) 4
   16: line 6 ("", Mark, 5, 4) 3
   17: line 6 ("", Mark, 5, 4, 3) }
   18: line 6 ("", 5, 4, 3, 3) ARRAY_MAKE
   19: line 7 ("", 3[5, 4, 3]) DUP
   20: line 7 ("", 3[5, 4, 3], 3[5, 4, 3]) ARRAY_FIRST
   21: line 9 ("", 3[5, 4, 3], 0, 1) JmpIfFalse: +5
   22: line 10 ("", 3[5, 4, 3], 0) OVER
   23: line 10 ("", 3[5, 4, 3], 0, 3[5, 4, 3]) SWAP
   24: line 10 ("", 3[5, 4, 3], 3[5, 4, 3], 0) ARRAY_NEXT
   25: line 11 ("", 3[5, 4, 3], 1, 1) JMP: -4
   21: line 9 ("", 3[5, 4, 3], 1, 1) JmpIfFalse: +5
   22: line 10 ("", 3[5, 4, 3], 1) OVER
   23: line 10 ("", 3[5, 4, 3], 1, 3[5, 4, 3]) SWAP
   24: line 10 ("", 3[5, 4, 3], 3[5, 4, 3], 1) ARRAY_NEXT
   25: line 11 ("", 3[5, 4, 3], 2, 1) JMP: -4
   21: line 9 ("", 3[5, 4, 3], 2, 1) JmpIfFalse: +5
   22: line 10 ("", 3[5, 4, 3], 2) OVER
   23: line 10 ("", 3[5, 4, 3], 2, 3[5, 4, 3]) SWAP
   24: line 10 ("", 3[5, 4, 3], 3[5, 4, 3], 2) ARRAY_NEXT
   25: line 11 ("", 3[5, 4, 3], 0, 0) JMP: -4
   21: line 9 ("", 3[5, 4, 3], 0, 0) JmpIfFalse: +5
   26: line 12 ("", 3[5, 4, 3], 0) POP
   27: line 12 ("", 3[5, 4, 3]) POP
   28: line 14 ("") {
   29: line 14 ("", Mark) "c"
   30: line 14 ("", Mark, "c") 5
   31: line 14 ("", Mark, "c", 5) "b"
   32: line 14 ("", Mark, "c", 5, "b") 4
   33: line 14 ("", Mark, "c", 5, "b", 4) "a"
   34: line 14 ("", Mark, "c", 5, "b", 4, "a") 3
   35: line 14 ("", Mark, "c", 5, "b", 4, "a", 3) }
   36: line 14 ("", "c", 5, "b", 4, "a", 3, 6) 2
   37: line 14 ("", "c", 5, "b", 4, "a", 3, 6, 2) /
   38: line 14 ("", "c", 5, "b", 4, "a", 3, 3) ARRAY_MAKE_DICT
   39: line 15 ("", 3{"a": 3, "b": 4, "c": 5}) DUP
   40: line 15 ("", 3{"a": 3, "b": 4, "c": 5}, 3{"a": 3, "b": 4, "c": 5}) ARRAY_FIRST
   41: line 17 ("", 3{"a": 3, "b": 4, "c": 5}, "a", 1) JmpIfFalse: +5
   42: line 18 ("", 3{"a": 3, "b": 4, "c": 5}, "a") OVER
   43: line 18 ("", 3{"a": 3, "b": 4, "c": 5}, "a", 3{"a": 3, "b": 4, "c": 5}) SWAP
   44: line 18 ("", 3{"a": 3, "b": 4, "c": 5}, 3{"a": 3, "b": 4, "c": 5}, "a") ARRAY_NEXT
   45: line 19 ("", 3{"a": 3, "b": 4, "c": 5}, "b", 1) JMP: -4
   41: line 17 ("", 3{"a": 3, "b": 4, "c": 5}, "b", 1) JmpIfFalse: +5
   42: line 18 ("", 3{"a": 3, "b": 4, "c": 5}, "b") OVER
   43: line 18 ("", 3{"a": 3, "b": 4, "c": 5}, "b", 3{"a": 3, "b": 4, "c": 5}) SWAP
   44: line 18 ("", 3{"a": 3, "b": 4, "c": 5}, 3{"a": 3, "b": 4, "c": 5}, "b") ARRAY_NEXT
   45: line 19 ("", 3{"a": 3, "b": 4, "c": 5}, "c", 1) JMP: -4
   41: line 17 ("", 3{"a": 3, "b": 4, "c": 5}, "c", 1) JmpIfFalse: +5
   42: line 18 ("", 3{"a": 3, "b": 4, "c": 5}, "c") OVER
   43: line 18 ("", 3{"a": 3, "b": 4, "c": 5}, "c", 3{"a": 3, "b": 4, "c": 5}) SWAP
   44: line 18 ("", 3{"a": 3, "b": 4, "c": 5}, 3{"a": 3, "b": 4, "c": 5}, "c") ARRAY_NEXT
   45: line 19 ("", 3{"a": 3, "b": 4, "c": 5}, 0, 0) JMP: -4
   41: line 17 ("", 3{"a": 3, "b": 4, "c": 5}, 0, 0) JmpIfFalse: +5
   46: line 20 ("", 3{"a": 3, "b": 4, "c": 5}, 0) POP
   47: line 20 ("", 3{"a": 3, "b": 4, "c": 5}) POP
   48: line 21 ("") EXIT
Execution completed in 71 steps.

